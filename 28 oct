-- Drop temporary tables if they exist
IF OBJECT_ID('tempdb..#LoginInfo') IS NOT NULL DROP TABLE #LoginInfo;
IF OBJECT_ID('tempdb..#OrphanedUsers') IS NOT NULL DROP TABLE #OrphanedUsers;

-- Create a temporary table to store login information from xp_logininfo
CREATE TABLE #LoginInfo (
    LoginName NVARCHAR(255),
    AccountType NVARCHAR(50),
    Privilege NVARCHAR(50),
    MappedLoginName NVARCHAR(255),
    PermissionPath NVARCHAR(255)
);

-- Create a temporary table to store orphaned users
CREATE TABLE #OrphanedUsers (
    DatabaseName NVARCHAR(255),
    UserName NVARCHAR(255)
);

-- Insert orphaned users into #OrphanedUsers using sp_MSforeachdb
DECLARE @command NVARCHAR(1000);
SET @command = 'USE [?]; INSERT INTO #OrphanedUsers (DatabaseName, UserName)
                EXEC sp_change_users_login ''report'';';
EXEC sp_MSforeachdb @command;

-- Main query to retrieve information about databases and logins
SELECT @@SERVICENAME AS InstanceName,
    db.name AS DatabaseName,
    CASE
        WHEN db.is_trustworthy_on = 1 THEN 'Yes'
        WHEN db.is_trustworthy_on = 0 THEN 'No'
        WHEN db.is_trustworthy_on IS NULL THEN 'NULL'
        ELSE CAST(db.is_trustworthy_on AS VARCHAR)
    END AS is_trustworthy_on,
    SUSER_SNAME(db.owner_sid) AS db_owner,
    CASE
        WHEN IS_SRVROLEMEMBER('sysadmin', SUSER_SNAME(db.owner_sid)) = 1 THEN 'Yes'
        WHEN IS_SRVROLEMEMBER('sysadmin', SUSER_SNAME(db.owner_sid)) = 0 THEN 'No'
        WHEN IS_SRVROLEMEMBER('sysadmin', SUSER_SNAME(db.owner_sid)) IS NULL THEN 'NULL'
        ELSE CAST(IS_SRVROLEMEMBER('sysadmin', SUSER_SNAME(db.owner_sid)) AS VARCHAR)
    END AS is_sysadmin,
    CASE
        WHEN sl.is_disabled = 1 THEN 'Yes'
        WHEN sl.is_disabled = 0 THEN 'No'
        WHEN sl.is_disabled IS NULL THEN 'NULL'
        ELSE CAST(sl.is_disabled AS VARCHAR)
    END AS IsLoginDisabled,
    CASE
        WHEN o.UserName IS NOT NULL THEN 'Yes'
        ELSE 'No'
    END AS IsOrphaned,
    CASE
        WHEN dbm.mirroring_role = 1 THEN 'Mirroring - Primary'
        WHEN dbm.mirroring_role = 2 THEN 'Mirroring - Secondary'
        WHEN sys.fn_hadr_is_primary_replica(db.name) = 1 THEN 'AG - Primary'
        WHEN sys.fn_hadr_is_primary_replica(db.name) = 0 THEN 'AG - Secondary'
        ELSE 'None'
    END AS DR_Role
FROM sys.databases db
LEFT JOIN sys.sql_logins sl ON db.owner_sid = sl.sid
LEFT JOIN sys.database_mirroring dbm ON db.database_id = dbm.database_id
LEFT JOIN #OrphanedUsers o ON db.name = o.DatabaseName AND SUSER_SNAME(db.owner_sid) = o.UserName;

-- Update the is_sysadmin column if the login has admin privileges
DECLARE @LoginName NVARCHAR(255);

-- Cursor to loop through each login
DECLARE login_cursor CURSOR FOR
SELECT name
FROM sys.sql_logins
WHERE IS_SRVROLEMEMBER('sysadmin', name) IS NULL;

OPEN login_cursor;
FETCH NEXT FROM login_cursor INTO @LoginName;

WHILE @@FETCH_STATUS = 0
BEGIN
    -- Insert login details into #LoginInfo table
    INSERT INTO #LoginInfo
    EXEC xp_logininfo @acctname = @LoginName, @option = 'all';

    -- Update the is_sysadmin column if admin privileges found
    UPDATE sysAdminTable
    SET is_sysadmin = 'Yes'
    FROM (
        SELECT DISTINCT DatabaseName, db_owner, is_sysadmin
        FROM #LoginInfo
        WHERE Privilege = 'admin' AND LoginName = @LoginName
    ) AS sysAdminTable;

    FETCH NEXT FROM login_cursor INTO @LoginName;
END

CLOSE login_cursor;
DEALLOCATE login_cursor;

-- Drop temporary tables after use
DROP TABLE IF EXISTS #LoginInfo;
DROP TABLE IF EXISTS #OrphanedUsers;