param(
    [string]$ConfigPath = ".\config.json",
    [ValidateSet("DEV", "TEST", "PROD")]
    [string]$Environment
)

# --- LOGGING FUNCTION ---
function Write-Log {
    param ([string]$Message, [string]$Level = "INFO")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $entry = "[$timestamp] [$Level] $Message"
    Write-Output $entry
    Add-Content -Path $script:LogFile -Value $entry
}

# --- STEP PROMPT FUNCTION ---
function Confirm-Continue {
    $choice = Read-Host "‚è© Do you want to continue to the next step? (Y/N)"
    if ($choice.ToUpper() -ne 'Y') {
        Write-Log "User chose to stop the script."
        exit
    }
}

# --- LOAD CONFIG ---
if (-Not (Test-Path $ConfigPath)) {
    Write-Host "‚ùå Configuration file not found: $ConfigPath"
    exit 1
}
$config = Get-Content -Path $ConfigPath -Raw | ConvertFrom-Json
$script:LogFile = $config.LogFile
if (Test-Path $script:LogFile) { Remove-Item $script:LogFile -Force }

Write-Log "üü¢ Script started."

# --- STEP 0.1: OS VERIFICATION ---
$osCaption = (Get-CimInstance Win32_OperatingSystem).Caption
Write-Log "Detected OS: $osCaption"
if ($config.SupportedOS -notcontains $osCaption) {
    Write-Log "‚ö†Ô∏è OS not listed in supported config." "WARNING"
    $resp = Read-Host "‚ö†Ô∏è Current OS is not in SupportedOS list. Continue anyway? (Y/N)"
    if ($resp.ToUpper() -ne "Y") {
        Write-Log "Terminated due to unsupported OS"
        exit 1
    }
}
Write-Log "‚úÖ OS verified."
Confirm-Continue

# --- STEP 0.2: ADMIN CHECK ---
$isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole("Administrator")
if (-not $isAdmin) {
    Write-Log "‚ö†Ô∏è Script is not running as administrator!" "WARNING"
    $continue = Read-Host "‚ö†Ô∏è You are NOT running as Administrator. Do you still want to continue? (Y/N)"
    if ($continue.ToUpper() -ne 'Y') {
        exit 1
    }
}
Write-Log "‚úÖ Admin check complete."
Confirm-Continue

# --- ENVIRONMENT SELECTION ---
if (-not $Environment) {
    $Environment = Read-Host "Select environment (DEV/TEST/PROD)"
}
$envChoice = $Environment.ToUpper()
Write-Log "Selected environment: $envChoice"

# === STEP 1: ENABLE WINDOWS FEATURES ===
Write-Log "STEP 1: Enable Windows Features"
foreach ($feature in $config.WindowsFeatures) {
    try {
        $alreadyInstalled = Get-WindowsFeature -Name $feature | Where-Object {$_.Installed}
        if (-not $alreadyInstalled) {
            Install-WindowsFeature -Name $feature -IncludeManagementTools -ErrorAction Stop | Out-Null
            Write-Log "‚úÖ Installed feature: $feature"
        } else {
            Write-Log "‚úîÔ∏è Feature already installed: $feature"
        }
    } catch {
        Write-Log "‚ùå Failed to install feature $feature: $_" "ERROR"
    }
}
Confirm-Continue

# === STEP 2: SET ACCESS CONTROL ON SHARED FOLDER ===
# (same logic from earlier ‚Äì abbreviated here)
# ...
Write-Log "‚úÖ Step 2 shared folder permissions applied."
Confirm-Continue

# === STEP 3 to STEP 5 ===
# (Other steps like copying tools/scripts, setting timezone...)
# Write-Log + Confirm-Continue after each one.

# === STEP 6: IIS SETTINGS ‚Äì Subpoints a‚Äìf ===
# (Insert full code block from previous Step 6 section here)
# Each subpoint concludes with Write-Log and Confirm-Continue

# === STEP 7: DENY IIS COMMANDS (e.g. mtdm) ===
Write-Log "STEP 7: Add IIS Deny Commands"
try {
    $cmdCfg = $config.IISCommandFiltering
    if ($cmdCfg.Scope -eq "Machine" -and $cmdCfg.DenyCommands.Count -gt 0) {
        foreach ($denyCmd in $cmdCfg.DenyCommands) {
            Add-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' `
                -filter "system.webServer/security/requestFiltering/denyUrlSequences" `
                -name "." `
                -value @{ sequence = $denyCmd }
            Write-Log "‚úÖ Deny command added: $denyCmd"
        }
    } else {
        Write-Log "‚ÑπÔ∏è No commands defined to block or scope is not Machine" "INFO"
    }
} catch {
    Write-Log "‚ùå Failed to configure Deny Commands: $_" "ERROR"
}
Confirm-Continue

Write-Log "‚úÖ Script completed successfully"
Write-Host "‚ú® All steps completed! Check log at $($config.LogFile)"
