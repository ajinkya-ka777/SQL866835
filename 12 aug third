{
  "DotNetAuthorizationRules": {
    "Sites": [
      {
        "Name": "Default Web Site",
        "WebConfigPath": "C:\\inetpub\\wwwroot\\web.config",
        "Rules": [
          { "AccessType": "Allow", "Users": "test\\user1", "EntryType": "Local" },
          { "AccessType": "Allow", "Users": "test\\user2", "EntryType": "Local" },
          { "AccessType": "Deny",  "Users": "*",          "EntryType": "Local" },
          { "AccessType": "Allow", "Users": "*",          "EntryType": "Inherited" }
        ]
      },
      {
        "Name": "FTPaaS",
        "WebConfigPath": "C:\\inetpub\\ftp\\web.config",
        "Rules": [
          { "AccessType": "Allow", "Users": "test\\user1", "EntryType": "Local" },
          { "AccessType": "Allow", "Users": "test\\user2", "EntryType": "Local" },
          { "AccessType": "Deny",  "Users": "*",          "EntryType": "Local" },
          { "AccessType": "Allow", "Users": "*",          "EntryType": "Inherited" }
        ]
      }
    ]
  }
}



param (
    [string]$ConfigPath = ".\config.json"
)

function Write-Log {
    param([string]$Message, [string]$Level = "INFO")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logEntry = "[$timestamp] [$Level] $Message"
    Write-Output $logEntry
}

# --- Load JSON config
if (-not (Test-Path $ConfigPath)) {
    Write-Log "❌ Config file not found: $ConfigPath" "ERROR"
    exit 1
}
$config = Get-Content -Raw -Path $ConfigPath | ConvertFrom-Json

# --- Step: Update .NET Authorization Rules in web.config ---
foreach ($site in $config.DotNetAuthorizationRules.Sites) {
    $webConfigPath = $site.WebConfigPath
    Write-Log "Processing site '$($site.Name)' - Web.config: $webConfigPath"

    if (-not (Test-Path $webConfigPath)) {
        Write-Log "❌ web.config not found: $webConfigPath" "ERROR"
        continue
    }

    try {
        [xml]$xml = Get-Content $webConfigPath

        # Ensure <configuration><system.web> exists
        if (-not $xml.configuration) {
            $xml.AppendChild($xml.CreateElement("configuration")) | Out-Null
        }
        if (-not $xml.configuration.'system.web') {
            $xml.configuration.AppendChild($xml.CreateElement("system.web")) | Out-Null
        }

        $systemWeb = $xml.configuration.'system.web'

        # Remove existing <authorization> for 'Local' rules
        $authNode = $systemWeb.authorization
        if ($authNode) {
            $systemWeb.RemoveChild($authNode) | Out-Null
        }

        # Create <authorization> node
        $authElement = $xml.CreateElement("authorization")

        foreach ($rule in $site.Rules) {
            if ($rule.EntryType -eq "Inherited") {
                # Inherited rules are from parent config; skip adding here
                continue
            }

            # Create <allow> or <deny> element
            $ruleElement = $xml.CreateElement($rule.AccessType.ToLower())
            $ruleElement.SetAttribute("users", $rule.Users)
            $authElement.AppendChild($ruleElement) | Out-Null
        }

        $systemWeb.AppendChild($authElement) | Out-Null

        # Save updated web.config
        $xml.Save($webConfigPath)
        Write-Log "✅ Updated .NET authorization rules in $webConfigPath"

    } catch {
        Write-Log "❌ Error updating authorization rules for $($site.Name): $_" "ERROR"
    }
}

Write-Log "All .NET Authorization rules applied successfully."
