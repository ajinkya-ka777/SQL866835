-- Create a temporary table to hold the xp_logininfo result for all users
CREATE TABLE #LoginInfo (
    AccountName NVARCHAR(512),
    Type NVARCHAR(50),
    Privilege NVARCHAR(50),
    MappedLoginName NVARCHAR(512),
    PermissionPath NVARCHAR(512)
);

-- Declare variables to store the dynamic SQL and the username (db owner)
DECLARE @sql NVARCHAR(MAX);
DECLARE @username NVARCHAR(512);
DECLARE @dbname NVARCHAR(128);

-- Cursor to loop through each database
DECLARE db_cursor CURSOR FOR 
SELECT name, suser_sname(owner_sid) AS db_owner
FROM sys.databases;

-- Open the cursor
OPEN db_cursor;

-- Fetch the first row
FETCH NEXT FROM db_cursor INTO @dbname, @username;

-- Loop through all databases
WHILE @@FETCH_STATUS = 0
BEGIN
    -- Construct the dynamic SQL to execute xp_logininfo for the fetched username
    SET @sql = N'EXEC xp_logininfo @acctname = ''' + @username + ''', @option = ''all''';
    
    -- Insert xp_logininfo result into temporary table
    INSERT INTO #LoginInfo
    EXEC sp_executesql @sql;

    -- Fetch the next row
    FETCH NEXT FROM db_cursor INTO @dbname, @username;
END

-- Close and deallocate the cursor
CLOSE db_cursor;
DEALLOCATE db_cursor;

-- Now modify the larger query to check if admin privileges exist in the temporary table
SELECT @@SERVICENAME AS InstanceName,
    db.name AS DatabaseName,
    CASE
        WHEN db.is_trustworthy_on = 1 THEN 'Yes'
        WHEN db.is_trustworthy_on = 0 THEN 'No'
        WHEN db.is_trustworthy_on IS NULL THEN 'NULL'
        ELSE CAST(db.is_trustworthy_on AS VARCHAR)
    END AS 'is_trustworthy_on',
    suser_sname(db.owner_sid) AS db_owner,
    -- Check if the admin privilege exists in the temp table for each db owner
    CASE
        WHEN EXISTS (
            SELECT 1 FROM #LoginInfo
            WHERE AccountName = suser_sname(db.owner_sid) AND Privilege = 'admin'
        ) THEN 'Yes'
        ELSE 'No'
    END AS 'is_sysadmin',
    CASE
        WHEN s1.is_disabled = 1 THEN 'Yes'
        WHEN s1.is_disabled = 0 THEN 'No'
        WHEN s1.is_disabled IS NULL THEN 'NULL'
        ELSE CAST(s1.is_disabled AS VARCHAR)
    END AS 'IsLoginDisabled',
    CASE
        WHEN s1.name IS NULL THEN 'Yes'
        ELSE 'No'
    END AS IsOrphaned,
    CASE
        WHEN dbm.mirroring_role = 1 THEN 'Mirroring - Primary'
        WHEN dbm.mirroring_role = 2 THEN 'Mirroring - Secondary'
        WHEN sys.fn_hadr_is_primary_replica(db.name) = 1 THEN 'AG - Primary'
        WHEN sys.fn_hadr_is_primary_replica(db.name) = 0 THEN 'AG - Secondary'
        ELSE 'None'
    END AS 'DR_Role'
FROM sys.databases db
LEFT JOIN sys.sql_logins sl ON db.owner_sid = sl.sid
LEFT JOIN sys.database_mirroring dbm ON db.database_id = dbm.database_id
LEFT JOIN sys.server_principals s1 ON db.owner_sid = s1.sid;

-- Drop the temporary table after use
DROP TABLE #LoginInfo;
