<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Windows Server Automation - Technical Document</title>
    <style>
        body { font-family: Calibri, Arial, sans-serif; color: #212529; margin: 24px; }
        h1 { color: #375a7f; margin-bottom: 8px; }
        h2 { color: #18bc9c; margin-top: 28px; margin-bottom: 8px; }
        h3 { color: #444; margin-bottom: 6px;}
        p, li { font-size: 1.05em; line-height: 1.59em; }
        pre, code { background-color: #f5f8fa; padding: 2px 6px; border-radius: 3px; font-size: 1em; }
        table { border-collapse: collapse; }
        td, th { border: 1px solid #cfd8dc; padding: 7px 15px; }
        th { background: #e9ecef; }
        ul { margin-top: 0; }
    </style>
</head>
<body>

<h1>Technical Implementation Document<br/>Windows Server Automated Configuration Scripts</h1>

<h2>Introduction</h2>
<p>
This document explains the design, usage, and customization approach for two standardized PowerShell scripts that streamline the provisioning and configuration of Windows Server environments.<br>
The solution is built for practical, repeatable deployment in both new and existing infrastructure, allowing teams to reduce manual work, avoid configuration drift, and simplify rollbacks.
</p>

<h2>Script Summary</h2>
<table>
    <tr>
        <th>Script</th>
        <th>Main Purpose</th>
        <th>Key Features</th>
    </tr>
    <tr>
        <td>step1.ps1</td>
        <td>Initial OS Setup & Foundation</td>
        <td>
            <ul>
              <li>Enables required Windows features and roles as specified in <code>config.json</code></li>
              <li>Sets system time zone</li>
              <li>Applies folder access control (ACL), based on administrator-chosen environment: DEV, TEST, or PROD</li>
              <li>Copies essential resources to configured paths: tools, scripts, application</li>
              <li>Supports install, validate, and rollback via <code>-Action</code> parameter</li>
              <li>Keeps comprehensive log files for each operation</li>
              <li>Automatically triggers reboot when necessary</li>
            </ul>
        </td>
    </tr>
    <tr>
        <td>step2.ps1</td>
        <td>Application, IIS, and Supporting Service Setup</td>
        <td>
            <ul>
                <li>Installs .NET Hosting Bundle</li>
                <li>Installs WebDeploy (checks for duplicate installs and updates as needed)</li>
                <li>Executes GAC configuration scripts</li>
                <li>Imports scheduled tasks from XML files as per configuration</li>
                <li>Applies appSettings modifications to both 32 and 64-bit <code>machine.config</code> files</li>
                <li>Copies and configures SFTP service files; manages service lifecycle</li>
                <li>Updates <code>FtpsyncService.exe.config</code> for SSL certificate bindings</li>
                <li>Imports IIS configuration using msdeploy (with encrypted package and password)</li>
                <li>Executes PowerShell scripts to control application services (stop/start all)</li>
                <li>Restarts IIS and validates mission-critical URLs for HTTP 200 responses</li>
                <li>Verifies access to configured NAS share paths</li>
                <li>Full validation and rollback logic for all features</li>
            </ul>
        </td>
    </tr>
</table>

<h2>File Structure</h2>
<ul>
    <li><strong>config.json</strong> – master environment/config file for all script variables</li>
    <li><strong>step1.ps1</strong> – executes base system provisioning</li>
    <li><strong>step2.ps1</strong> – configures application/IIS/services with full rollback and validation</li>
    <li><strong>Resources*</strong> – directory for installers, backups, and XML config files referenced in JSON</li>
    <li><strong>logs*</strong> – stores separate install, validate, and rollback logs per script, per run</li>
</ul>

<h2>How to Execute</h2>
<ol>
    <li>Update <strong>config.json</strong> for correct environment, resource, and installer settings.</li>
    <li>Open PowerShell as Administrator.</li>
    <li>Run <strong>step1.ps1</strong> for initial configuration:<br/>
        <code>.step1.ps1 -Action install</code>
    </li>
    <li>After system reboot, validate installation:<br/>
        <code>.step1.ps1 -Action validate</code>
    </li>
    <li>To undo step1 configuration, use rollback:<br/>
        <code>.step1.ps1 -Action rollback</code>
    </li>
    <li>Run <strong>step2.ps1</strong> for app/IIS/service setup:<br/>
        <code>.step2.ps1 -action install</code>
    </li>
    <li>Validate step2 setup:<br/>
        <code>.step2.ps1 -action validate</code>
    </li>
    <li>Rollback step2 changes if needed:<br/>
        <code>.step2.ps1 -action rollback</code>
    </li>
</ol>

<h2>Parameter Usage</h2>
<ul>
    <li><code>-Action install</code>: Perform new installation and system setup</li>
    <li><code>-Action validate</code>: Verify current configuration/folder/service state matches expectations</li>
    <li><code>-Action rollback</code>: Remove or revert configured resources and features</li>
</ul>

<h2>Customizing config.json</h2>
<p>
The <code>config.json</code> centralizes every environment detail, making customization simple:
</p>
<table>
  <tr>
    <th>Key/Section</th>
    <th>Sample Value</th>
    <th>Description</th>
  </tr>
  <tr>
    <td><code>WindowsFeatures</code></td>
    <td>[ "NET-Framework-Core", "Web-Server", ... ]</td>
    <td>Features and roles to install (step 1)</td>
  </tr>
  <tr>
    <td><code>TimeZone</code></td>
    <td>"UTC"</td>
    <td>System time zone to set</td>
  </tr>
  <tr>
    <td><code>Environments</code></td>
    <td>AccessControl per DEV/TEST/PROD<br>
      { "DEV": { ... }, "PROD": { ... } }
    </td>
    <td>Configure user/group ACL for each site</td>
  </tr>
  <tr>
    <td><code>ToolsCopy</code></td>
    <td>{ "SourceTools": "./Resources/Tools", "DestTools": "D:/Tools" }</td>
    <td>Source/destination for tools copy</td>
  </tr>
  <tr>
    <td><code>DotNetHostingBundle</code></td>
    <td>{ "InstallerPath": "./Resources/dotnet-hosting.msi", "SilentArgs": "/quiet /norestart" }</td>
    <td>.NET Bundle MSI, install arguments</td>
  </tr>
  <tr>
    <td><code>WebDeploy</code></td>
    <td>{ "InstallerPath": "./Resources/WebDeploy_amd64_en-US.msi" }</td>
    <td>WebDeploy MSI installer path</td>
  </tr>
  <tr>
    <td><code>MsDeployPath</code></td>
    <td>"C:/Program Files/IIS/Microsoft Web Deploy V3/msdeploy.exe"</td>
    <td>Path to msdeploy executable</td>
  </tr>
  <tr>
    <td><code>ConfigBackupPath</code></td>
    <td>"./Resources/IIS_Backup/IIS_Backup.zip"</td>
    <td>IIS configuration package for import</td>
  </tr>
  <tr>
    <td><code>ScriptExecution</code></td>
    <td>{ "Scripts": [ { "Path": "D:/Tools/Scripts/stop_all_services.ps1", "RunAsAdmin": true } ] }</td>
    <td>Scripts to stop/start all services, executed after IIS config import</td>
  </tr>
  <tr>
    <td><code>HttpCheckUrls</code></td>
    <td>[ "https://localhost/transfer1" ]</td>
    <td>Mission-critical URLs for final health check after IIS restart</td>
  </tr>
  <tr>
    <td><code>NASPath</code></td>
    <td>"\\\
as-server\\projects"</td>
    <td>UNC path used for access test</td>
  </tr>
</table>
<p>
Always ensure file/folder paths and account names are correct and reflect actual network resources before execution. When introducing service or feature changes, update the relevant config sections and test thoroughly in isolated systems first.
</p>

<h2>Validation & Rollback</h2>
<ul>
  <li>Both scripts maintain separate log files for install, validate, and rollback—these are defined in <code>config.json</code>.</li>
  <li>After each install, confirm completion via the validate action and check all logged warnings/errors.</li>
  <li>Rollback actions disable features/services and move/clean application and SFTP resources. Note that certain ACL and config changes may require manual review.</li>
</ul>

<h2>Operational Notes and Recommendations</h2>
<ul>
    <li>Run all scripts using PowerShell as Administrator for full functionality.</li>
    <li>Test new configuration changes on non-production servers prior to rollout.</li>
    <li>Always keep backup copies of logs and configuration files for audit and troubleshooting.</li>
    <li>For folder permissions, ensure you select the correct environment at prompt during setup—changes only apply to that environment's shared folder.</li>
    <li>Before launching step2.ps1, make sure step1.ps1 has run successfully and the system has rebooted if required.</li>
    <li>If any URLs or NAS paths in config change, update <code>HttpCheckUrls</code> and <code>NASPath</code> accordingly.</li>
</ul>

<h2>Typical Troubleshooting Tips</h2>
<ul>
    <li>If a script reports missing resources, double-check all paths and filenames in config.json.</li>
    <li>If feature installation fails, try running Windows Update and verifying prerequisite packages.</li>
    <li>Check log files for explicit error details—these will guide most troubleshooting steps.</li>
    <li>If msdeploy import or WebDeploy installation fails, verify installer version, system architecture, and correct registry checks.</li>
</ul>

<h2>Standard Script Invocation Examples</h2>
<pre>
# Install base system
.step1.ps1 -Action install

# Validate base install
.step1.ps1 -Action validate

# Rollback base install
.step1.ps1 -Action rollback

# Install IIS and applications
.step2.ps1 -action install

# Validate app/IIS install
.step2.ps1 -action validate

# Rollback app/IIS install
.step2.ps1 -action rollback
</pre>

<h2>Contact and Support</h2>
<p>
For additional team questions or improvements, please contact the infrastructure automation owner or refer to your internal support documentation. Customizations and updates should be coordinated with your DevOps or Systems Engineering teams.
</p>

</body>
</html>